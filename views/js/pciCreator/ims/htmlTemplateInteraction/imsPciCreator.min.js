define("tpl!htmlTemplateInteraction/creator/tpl/propertiesForm",["handlebars"],function(hb){return hb.template(function(Handlebars,depth0,helpers,partials,data){this.compilerInfo=[4,">= 1.0.0"],helpers=this.merge(helpers,Handlebars.helpers),data=data||{};var stack1,helper,options,buffer="",helperMissing=helpers.helperMissing,escapeExpression=this.escapeExpression;return buffer+="<div class=\"panel\">\n    <label for=\"\" class=\"has-icon\">"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"Response identifier",options):helperMissing.call(depth0,"__","Response identifier",options)))+"</label>\n    <span class=\"icon-help tooltipstered\" data-tooltip=\"~ .tooltip-content:first\" data-tooltip-theme=\"info\"></span>\n    <div class=\"tooltip-content\">"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\"_\") and contain only Letters, underscores, hyphens (\"-\"), period (\".\", a.k.a. full-stop), Digits, CombiningChars and Extenders.",options):helperMissing.call(depth0,"__","The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\"_\") and contain only Letters, underscores, hyphens (\"-\"), period (\".\", a.k.a. full-stop), Digits, CombiningChars and Extenders.",options)))+"</div>\n\n    <input type=\"text\"\n           name=\"identifier\"\n           value=\"",(helper=helpers.identifier)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.identifier,stack1="function"===typeof helper?helper.call(depth0,{hash:{},data:data}):helper),buffer+=escapeExpression(stack1)+"\"\n           placeholder=\"e.g. RESPONSE\"\n           data-validate=\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=",(helper=helpers.serial)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.serial,stack1="function"===typeof helper?helper.call(depth0,{hash:{},data:data}):helper),buffer+=escapeExpression(stack1)+");\">\n</div>\n\n<hr />\n\n<div class=\"panel\">\n    <label for=\"html\" class=\"has-icon\">"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"HTML Template",options):helperMissing.call(depth0,"__","HTML Template",options)))+"</label>\n    <span class=\"icon-help tooltipstered\" data-tooltip=\"~ .tooltip-content:first\" data-tooltip-theme=\"info\"></span>\n    <span class=\"tooltip-content\">"+escapeExpression((helper=helpers.__||depth0&&depth0.__,options={hash:{},data:data},helper?helper.call(depth0,"The HTML template provided to the PCI's iframe. Can be a full HTML document or just body contents. Can contain inline styles or images, but no scripts. For a single or multiple response elements, add 'name=\"the-name\"' and 'data-response' attributes to each one. For wordcount display, add an empty element with 'data-wordcount-for=\"the-name\"' attribute.",options):helperMissing.call(depth0,"__","The HTML template provided to the PCI's iframe. Can be a full HTML document or just body contents. Can contain inline styles or images, but no scripts. For a single or multiple response elements, add 'name=\"the-name\"' and 'data-response' attributes to each one. For wordcount display, add an empty element with 'data-wordcount-for=\"the-name\"' attribute.",options)))+"</span>\n    <input type=\"text\"\n           id=\"html\"\n           name=\"html\"\n           value=\"",(helper=helpers.html)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.html,stack1="function"===typeof helper?helper.call(depth0,{hash:{},data:data}):helper),buffer+=escapeExpression(stack1)+"\"\n           placeholder=\"\"\n           data-validate=\"$notEmpty;\">\n</div>",buffer})}),define("htmlTemplateInteraction/creator/widget/states/Question",["taoQtiItem/qtiCreator/widgets/states/factory","taoQtiItem/qtiCreator/widgets/interactions/states/Question","taoQtiItem/qtiCreator/widgets/helpers/formElement","taoQtiItem/qtiCreator/editor/simpleContentEditableElement","taoQtiItem/qtiCreator/editor/containerEditor","tpl!htmlTemplateInteraction/creator/tpl/propertiesForm"],function(stateFactory,Question,formElement,simpleEditor,containerEditor,formTpl){"use strict";function configChangeCallBack(interaction,value,name){interaction.prop(name,value),interaction.triggerPci("configChange",[interaction.getProperties()])}const stateQuestion=stateFactory.extend(Question,function(){const $container=this.widget.$container,$prompt=$container.find(".prompt"),interaction=this.widget.element;containerEditor.create($prompt,{change:function(text){interaction.data("prompt",text),interaction.updateMarkup()},markup:interaction.markup,markupSelector:".prompt",related:interaction,areaBroker:this.widget.getAreaBroker()})},function(){const $container=this.widget.$container,$prompt=$container.find(".prompt");simpleEditor.destroy(this.widget.$container),containerEditor.destroy($prompt)});return stateQuestion.prototype.initForm=function(){const interaction=this.widget.element,$form=this.widget.$form,response=interaction.getResponseDeclaration();$form.html(formTpl({serial:response.serial,identifier:interaction.attr("responseIdentifier"),html:interaction.prop("html")})),formElement.initWidget($form),formElement.setChangeCallbacks($form,interaction,{identifier:function(i,value){response.id(value),interaction.attr("responseIdentifier",value)},html:function(i,value){configChangeCallBack(i,value,"html")}})},stateQuestion}),define("htmlTemplateInteraction/creator/widget/states/states",["taoQtiItem/qtiCreator/widgets/states/factory","taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states","htmlTemplateInteraction/creator/widget/states/Question"],function(factory,states,QuestionState){"use strict";return factory.createBundle(states,[QuestionState],["answer","correct","map"])}),define("htmlTemplateInteraction/creator/widget/Widget",["taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget","htmlTemplateInteraction/creator/widget/states/states"],function(Widget,states){"use strict";const interactionWidget=Widget.clone();return interactionWidget.initCreator=function(){this.registerStates(states),Widget.initCreator.call(this)},interactionWidget}),define("tpl!htmlTemplateInteraction/creator/tpl/markup",["handlebars"],function(hb){return hb.template(function(Handlebars,depth0,helpers,partials,data){this.compilerInfo=[4,">= 1.0.0"],helpers=this.merge(helpers,Handlebars.helpers),data=data||{};var stack1,helper,buffer="";return buffer+="<div class=\"htmlTemplateInteraction\">\n    <div class=\"prompt\">",(helper=helpers.prompt)?stack1=helper.call(depth0,{hash:{},data:data}):(helper=depth0&&depth0.prompt,stack1="function"===typeof helper?helper.call(depth0,{hash:{},data:data}):helper),(stack1||0===stack1)&&(buffer+=stack1),buffer+="</div>\n    \n</div>",buffer})}),define("htmlTemplateInteraction/imsPciCreator",["htmlTemplateInteraction/creator/widget/Widget","tpl!htmlTemplateInteraction/creator/tpl/markup"],function(Widget,markupTpl){"use strict";return{getTypeIdentifier(){return"htmlTemplateInteraction"},getWidget(){return Widget},getDefaultProperties(){return{html:"<form><textarea name=\"text1\" data-response></textarea><p data-wordcount-for=\"text1\"></p></form>",isReviewMode:!1}},afterCreate(){},getMarkupTemplate(){return markupTpl},getMarkupData(pci,defaultData){return Object.assign({prompt:pci.data("prompt")},defaultData)}}}),define(["htmlTemplateInteraction/imsPciCreator"],function(IMSPCI){return IMSPCI});